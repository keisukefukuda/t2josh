#!/usr/bin/python
#-*- coding: utf-8 -*-

import os,os.path,re,sys
import optparse
import datetime
import random
import glob
from logging import debug,info,warning,error,critical

from subprocess import check_call

WarnLevel=1
TMPDIR = os.path.join(os.environ["HOME"], '.9deg')

VERSION_MAJOR = 0
VERSION_MINOR = 6

VER_STR = "9deg version %d.%02d" % (VERSION_MAJOR, VERSION_MINOR)

#=====================================================================
# general utility functions
#=====================================================================

def match_all(s, regexs):
    return all( [re.search(reg,s) for reg in regexs] )

def gen_tmp_name():
    dt = datetime.datetime.today()
    pid = os.getpid()
    rnd = 0

    name = None
    while True:
        name = "%s_%d%d.sh" % (dt.strftime("%y%m%d%H%M%S"), pid % 100, rnd)
        path = os.path.join(TMPDIR, name)
        if not os.path.exists(path):
            return path

        rnd += 1

def qx(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> check_output(["ls", "-l", "/dev/null"])
    'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'

    The stdout argument is not allowed as it is used internally.
    To capture standard error in the result, use stderr=STDOUT.

    >>> check_output(["/bin/sh", "-c",
    ...               "ls -l non_existent_file ; exit 0"],
    ...              stderr=STDOUT)
    'ls: non_existent_file: No such file or directory\n'

    NOTE: This function is from Python 2.7 repository.
    """
    from subprocess import Popen, PIPE
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd, output=output)
    return output


#=====================================================================
# TSUBAME environment handler
#=====================================================================
class QueueInfo:
    """Obtain queue information by calling t2stat -Qf.

    Queue information can be obtained from 'queue' member variable.
    """
    
    def __init__(self, raw_data = None):
        if raw_data is None:
            raw_data = qx(['t2stat', '-Qf'])
            
        self._parse()

    def names(self):
        """Return a list of queue names"""
        return [ q['name'] for q in self.queues ]

                
class Tsubame():

    Queues = None
    MPI_Envs = None
    
    @classmethod
    def parse_t2stat(self):
        # Parse t2stat's output with a FSM
        data = qx(['t2stat', '-Qf'])
        queues = []
        cur_q = {}
        cur_key = None
        cur_val = None

        lines = re.split(r'\r\n|\r|\n', data)
        
        for ln in lines:
            if re.match(r'^\s*$', ln): continue

            elif re.match(r'^[^ \t]', ln):
                # beginning of queue
                if len(cur_q) > 0:
                    queues.append(cur_q)
                    cur_q = {}
                m = re.match(r'Queue: (\w+)', ln)
                if m:
                    cur_q['name'] = m.group(1)
                else:
                    raise RuntimeError("Can't parse line : '%s'" % ln)

            elif re.match(r'^ ', ln):
                if cur_key and cur_val:
                    cur_q[cur_key] = cur_val
                    cur_key = None
                    cur_val = None
                m = re.match(r' +([A-Za-z0-9_.:-]+) = ([A-Za-z0-9_.:, [\]=+-]+)', ln)
                cur_key = m.group(1)
                cur_val = m.group(2)

            elif re.match(r'^\t', ln):
                # Cont. of a property value from the previous line
                m = re.match(r'\s+([^ \t].*)$', ln)
                cur_val += m.group(1)

        return queues
    
    @classmethod
    def qname(self, q):
        for queue in self.Queues:
            if re.match(re.compile('^' + queue + '$', re.I), q):
                return queue
        else:
            warning("Unknown queue : '%s'. Maybe misspelled?" % q)
            return q    

    @classmethod
    def list_mpienv_cand(self, key):
        regs = [ re.compile(reg) for reg in key.split('+') ]

        cand = [ e for e in self.MPI_Envs if match_all(e, regs) ]
        return cand

    @classmethod
    def list_mpienv(self):
        mpicc_path = qx(['which', 'mpicc'])

        tbl = [
            (r'openmpi/[0-9.]+/intel/bin',  'openmpi+intel'),
            (r'openmpi/[0-9.]+/pgi/bin',    'openmpi+pgi'),
            (r'openmpi/[0-9.]+/gcc/bin',    'openmpi+gcc'),
            (r'mvapich2/[0-9.]+/intel/bin', 'mvapich2+intel'),
            (r'mvapich2/[0-9.]+/pgi/bin',   'mvapich2+pgi'),
            (r'mvapich2/[0-9.]+/gcc/bin',   'mvapich2+gcc'),
            (r'mpich2/[0-9.]+/intel/bin',   'mpich2+intel'),
            (r'mpich2/[0-9.]+/pgi/bin',     'mpich2+pgi'),
            (r'mpich2/[0-9.]+/gcc/bin',     'mpich2+gcc'),
            ]
        
        for pair in tbl:
            if re.search( pair[0], mpicc_path ):
                return [pair[1]]

    @classmethod
    def queue_names(self):
        return [q['name'] for q in Tsubame.parse_t2stat()]
        
    # Available environments from the TSUBAME manual.
    # Should be updated periodically
    MPI_Envs = ['openmpi+intel',
                'openmpi+pgi',
                'openmpi+gcc',
                'mvapich2+intel',
                'mvapich2+pgi',
                'mvapich2+gcc',
                'mpich2+intel',
                'mpich2+pgi',
                'mpich2+gcc',]
    
Tsubame.Queues = Tsubame.queue_names()


class Builder():
    def __init__(self):
        pass

    def parse(self, opt, args):
        if len(args) < 1:
            raise RuntimeError, "command to execute is required."

        self.command = join_cmd(args)
        self.jobname = None # jobname(''.join(args))
        self.ncpus = 1
        self.total_nprocs = 1
        self.omp = None
        self.exported_envvars = set()

        # --- build arguments for t2sub command ---

        is_err = False
        t2sub_args = []
        l = [] # t2sub's -l option

        # select queue
        if opt.queue:
            self.queue = Tsubame.qname(opt.queue)
            t2sub_args += ['-q', self.queue]

        # Decide Number of processes and nodes
        if opt.np:
            np = opt.np.strip()
            m = re.match(r"^(\d+)x(\d+)x(\d+)$", np)
            if m:
                omp   = int(m.group(1))
                procs = int(m.group(2))
                nodes = int(m.group(3))
                l.append('select=%d' % nodes)
                l.append('mpiprocs=%d' % procs)

                self.total_nprocs = procs * nodes
                self.ncpus = procs * omp
                self.omp = omp
            
            m = re.match(r"^(\d+)x(\d+)$", np)
            if m:
                procs = int(m.group(1))
                nodes = int(m.group(2))
                l.append('select=%d' % nodes)
                l.append('mpiprocs=%d' % procs)

                self.total_nprocs = procs * nodes
                self.ncpus = procs

            m = re.match(r"^\d+$", np)
            if m:
                procs = int(m.group(0))
                l.append("select=%d" % procs)

                self.total_nprocs = procs
        else:
            self.ncpus = 1
            l.append('select=1')

        # OpenMP
        if not self.omp and opt.omp:
            self.omp = opt.omp
            if self.omp:
                self.ncpus *= self.omp
                
        # compute 'ncpus'
        if self.ncpus > 24:
            warning("Processes per node is larger than actual core count(12)." +
                    " That may cause something strange.")

        if self.total_nprocs > 24:
            pass
            #scatter = True

        if self.ncpus > 1:
            l += ["ncpus=%d" % self.ncpus]

        # Memory
        if opt.memory:
            l.append('mem=%s' % opt.memory)

        # TSUBAME groups
        # Here we do not auto-complete TSUBAME group names because
        # it is related to money and need to be correct :-)
        if opt.group:
            gr = opt.group
            if gr not in find_groups():
                warning("No such t2-group or you don't belong to '%s'" % gr)
            t2sub_args += ['-W', 'group_list=%s' % gr]
            
        # GPU
        if opt.gpus:
            if 1 <= opt.gpus and opt.gpus <= 3:
                l += ["gpus=%d" % opt.gpus]
            else:
                is_err=True
                print "Error: --gpus must be between 1 to 3"

        t2sub_args += ["-l", ':'.join(l)]

        # Set working directory
        if opt.dir and opt.home:
            warning("Both -d and --home are specified. --home is ignored.")
            opt.home = None

        if opt.dir:
            if (not os.path.exists(opt.dir)) or (not os.path.isdir(opt.dir)):
                warning("Directory '%s' does not exist." % opt.dir)
            self.wdir = opt.dir
        elif opt.home:
            self.wdir = "${HOME}"
        else:
            self.wdir = "${PBS_O_WORKDIR}"

        # CUDA version
        if opt.cuda_version:
            if re.match(r'3(\.[012])?|4(\.[01])?$', opt.cuda_version):
                self.cuda_version = opt.cuda_version
            else:
                error("Unknown CUDA Toolkit version : %s" % opt.cuda_version)
        else:
            self.cuda_version = None
                 

        # MPI environment
        if opt.mpi_env:
            if opt.mpi == "no":
                error("'--mpi-env' and '--mpi=no' cannot be used together.")

            opt.mpi = True
            # openmpi+intel, openmpi+pgi, mvapich2, mpich2
            if opt.mpi_env == 'auto':
                mpi_env = Tsubame.list_mpienv()
            else:
                mpi_env = Tsubame.list_mpienv_cand(opt.mpi_env)

            if len(mpi_env) == 0:
                error("Unknown MPI environment: %s", opt.mpi_env)
                error("Available MPI environments are: %s", ",".join(Tsubame.MPI_Envs))
                exit(-1)
            
            elif len(mpi_env) >= 2:
                raise RuntimeError, "Anbiguous MPI environment: %s (%s)" % (opt.mpi_env,",".join(mpi_env))
            self.mpi_env = mpi_env[0]

        else:
            self.mpi_env = None

        # Porcess placement
        if opt.place and len(opt.place) > 0:
            if opt.place not in ['free', 'scatter', 'pack']:
                warning("Unknown process placement: %s (must be one of free,scatter,pack)", opt.place)

            t2sub_args += ['-l', 'place=' + opt.place]

        # Check whether to invoke mpirun
        if opt.np is None or opt.mpi is None or opt.mpi == False or opt.mpi == "no":
            self.mpi = False
        else:
            self.mpi = True

        # passthrough arguments
        if opt.passthrough:
            t2sub_args += split_arg(opt.passthrough)

        if is_err:
            raise RuntimeError

        # set job name
        if opt.jobname:
            self.jobname = opt.jobname
            t2sub_args += ['-N', self.jobname]

        # verify
        if opt.verify:
            t2sub_args += ['-verify']

        self.t2sub_args = t2sub_args

    #=======================================================
    def gen_script(self):
        sh = ""
        sh += "cd %s\n" % self.wdir
        sh += "\n"

        # OpenMP number of threads
        if self.omp:
            sh += "export OMP_NUM_THREADS=%d\n" % self.omp
            sh += "\n"
            self.exported_envvars.add('OMP_NUM_THREADS')

        if self.cuda_version:
            v = "%.1f" % float(self.cuda_version)
            sh += "export LD_LIBRARY_PATH=/opt/cuda/%s/lib64:$LD_LIBRARY_PATH\n" % v
            sh += "export PATH=/opt/cuda/%s/bin:$PATH\n" % v
            sh += "\n"

            self.exported_envvars.add('LD_LIBRARY_PATH')
            self.exported_envvars.add('PATH')

        # MPI & compiler environment
        if self.mpi_env:
            sh += read_env_settings(self.mpi_env)
            sh += "\n"
            self.exported_envvars.add('PATH')
            self.exported_envvars.add('LD_LIBRARY_PATH')

        if self.mpi:
            # prepare "-x" options for mpirun
            opt_x = " ".join( ["-x %s" % v for v in self.exported_envvars] )
            sh += "mpirun %s -n %d -hostfile ${PBS_NODEFILE} %s\n" % (opt_x, self.total_nprocs, self.command)
        else:
            sh += self.command + "\n"

        return sh

    def gen_command(self):
        return ["t2sub"] + self.t2sub_args


# Main class of an application
class Application():
    def __init__(self):
        self.setup()
        
    def setup(self):
        if os.path.exists(TMPDIR) and not os.path.isdir(TMPDIR):
            raise "%s exists but not a directory." % TMPDIR

        if not os.path.exists(TMPDIR):
            os.mkdir(TMPDIR)
            


def find_groups():
    lines = re.split(r'\r\n|\r|\n', qx(["t2group"]))
    lines = lines[3:]
    lines = [ ln for ln in lines if ln.find("used") >= 0 ]

    groups = [ ln.split()[0] for ln in lines ]

    return groups

def read_env_settings(mpi):
    tbl = {
        'openmpi+intel'  : '/usr/apps/free/env/setompi-intel.sh',
        'openmpi+pgi'    : '/usr/apps/free/env/setompi-pgi.sh',
        'openmpi+gcc'    : '/usr/apps/free/env/setompi-gcc.sh',
        'mvapich2+intel' : '/usr/apps/free/env/setmvp-intel.sh',
        'mvapich2+pgi'   : '/usr/apps/free/env/setmvp-pgi.sh',
        'mvapich2+gcc'   : '/usr/apps/free/env/setmvp-gcc.sh',
        'mpich2+intel'   : '/usr/apps/free/env/setmpch-intel.sh',
        'mpich2+pgi'     : '/usr/apps/free/env/setmpch-pgi.sh',
        'mpich2+gcc'     : '/usr/apps/free/env/setmpch-gcc.sh',
        }

    if mpi not in tbl:
        raise RuntimeError, "Unknown internal error"

    lines = open(tbl[mpi]).read()

    return lines.replace(r'#!/bin/sh\n?', '')

def jobname(s):
    return "t2_" + re.sub(r'[^A-Za-z0-9_-]', '', s)[:12]

def println(fd, msg):
    fd.write(msg + "\n")

def split_arg(arg):
    qsign = None # 'd' for double-quote / 's' for single-quote
    state = None # or 'str'

    sp = []
    cur = ""

    while len(arg) > 0:
        c = arg[0]
        arg = arg[1:]

        if state is None:
            if c == '"':
                qsign = 'd'
                state = 'str'
            elif c == '\'':
                qsign = 's'
                state = 'str'
            elif re.match(r'\s', c):
                sp.append(cur)
                cur = ""
                state = None
            else:
                cur += c

        elif state == 'str' and qsign == 'd':
            if c == '"':
                state = None
            else:
                cur += c

        elif state == 'str' and qsign == 's':
            if c == '\'':
                state = None
            else:
                cur += c
        else:
            raise RuntimeError, "Unknown internal error"

    if len(cur) > 0:
        sp.append(cur)
    return sp

def join_cmd(ls):
    return ' '.join( map(wrap_arg, ls) )

def wrap_arg(t):
    D = '"' # double quote
    S = "'" # single quote
    QD = '\\"' # quoted double quote \"
    QS = "\\'" # quoted single quote \'
    
    if t.find(D) >= 0:
        return  S + t.replace(S, QS) + S
    elif t.find(S) >= 0:
        return D + t.replace(D, QD) + D
    else:
        return t

def remove_old_scripts():
    for scr in glob.glob(os.path.join(TMPDIR, '*.sh')):
        m = re.match(r'^(\d\d)(\d\d)(\d\d).*$', os.path.basename(scr))

        if m:
            created = datetime.date(2000 + int(m.group(1)), int(m.group(2)), int(m.group(3)))
            delta = datetime.date.today() - created

            if delta.days > 90:
                try: os.remove(scr)
                except: pass

def show_version_exit(option, opt, value, parser):
    print VER_STR
    exit(0)

def check_env():
    from subprocess import Popen, PIPE
    if not re.match(r'^t2', Popen(['hostname'], stdout=PIPE).communicate()[0]):
        sys.stderr.write("ERROR: Seems your aren't on TSUBAME2.0 node. Try --emulate\n")
        exit(-1)

def main():
    global WarnLevel

    check_env()

    app = Application()
    
    remove_old_scripts()

    opt = optparse.OptionParser()

    opt.add_option("", "--version", action="callback", callback=show_version_exit)

    # t2sub options
    opt.add_option("-n", "--num-proc", dest="np", default=None, help="ex.) 8, 4x2, 6x2x2")
    
    opt.add_option("-q", "--queue", dest="queue", default="S", help="Queue to use")
    
    opt.add_option("-g", "--group", dest="group", help="Your TSUBAME2 group")
    
    opt.add_option("-m", "--memory", dest="memory", help="Memory per chunk")

    opt.add_option("-N", "--jobname", dest="jobname", default=None,
                   help="Job name (same as t2sub's -N)")
    
    opt.add_option("",   "--openmp", dest="omp", type="int", default=None, help="Number of OpenMP threads")

    opt.add_option("", "--cuda-version", dest="cuda_version",
                   type="string", default=None,
                   help="CUDA Toolkit version(3.0/3.1/3.2/4.0)")
    
    opt.add_option("",   "--mpi-env", dest="mpi_env", default=None,
                   help="MPI environment (ex. Intel+OpenMPI, usually automatically selected)")
    
    opt.add_option("",   "--mpi", dest="mpi", action="store_true", default=True,
                   help="Whether to use MPI (usually automatically configured)")
    
    opt.add_option("",   "--place", dest="place", type="string", default=None)

    opt.add_option("",   "--no-mpi", dest="mpi", action="store_false",  help="Don't use MPI")
    
    opt.add_option("",   "--gpus", dest="gpus", type="int", help="Number of GPUs per chunk")
    opt.add_option("-p", "--pass-through", dest="passthrough", help="Arguments passed through to t2sub command")

    # additional options
    opt.add_option("-d", "--dir",       dest="dir",   type="string", default=None,
                   help="Working directory (default: current directory")
    
    opt.add_option("",   "--home",      dest="home",  action="store_true", default=None,
                   help="Equivalent to --dir=$HOME")
    
    opt.add_option("-Q", "--quiet", dest="quiet", action="store_true",
                   help="Execute t2sub command silently")
    
    opt.add_option("-i", "--prompt",    dest="quiet", action="store_false")
    
    opt.add_option("",   "--dry",       dest="dry",   action="store_true",
                   help="Just print and do nothing (dry run)")
    
    opt.add_option("-v", "--verify", dest="verify", action="store_true", default=None,
                   help="Use t2sub's '-verify' option")
    
    opt.add_option("-W", dest="warning", type="string", default=None)

    (options, args) = opt.parse_args()

    if options.warning == "no":
        WarnLevel = 0
    elif options.warning == "error":
        WarnLevel = 2
    
    builder = Builder()
    builder.parse(options, args)

    tmp = gen_tmp_name()
    scr = builder.gen_script()
    cmd = builder.gen_command() + [tmp]
    cmd_str = ' '.join( [wrap_arg(c) for c in cmd] )
    
    me = os.path.split(sys.argv[0])[1]

    out = open(tmp, 'w')

    println( out, "#!/bin/sh")
    println( out, "#----------------------------------------------")
    println( out, "# Generated by %s at %s" % (me, datetime.datetime.today()))
    println( out, "# in directory %s" % os.getcwd())
    println( out, '# ' + cmd_str)
    println( out, "# %s" % tmp)
    println( out, scr)
    println( out, "#----------------------------------------------")

    out.close()
    check_call(["chmod", "+x", tmp])

    # Issue the command
    if options.dry:
	fd = open(tmp, 'r')
        print fd.read()
        fd.close()
    else:
        print cmd_str
        check_call(cmd)


if __name__ == "__main__":
    main()
